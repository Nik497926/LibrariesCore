import proguard.gradle.ProGuardTask
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
        classpath 'tech.justagod:cutter:2.1.0-SNAPSHOT'
        classpath 'net.sf.proguard:proguard-gradle:6.0.2'
    }
}

apply plugin: 'forge'
apply plugin: 'cutter'

version = "1.0"
group= "ru.vizzi.LibrariesCore" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LibrariesCore"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}
sourceCompatibility = targetCompatibility = "1.8"
cutter.initializeDefault(true, false)
cutter.removeAnnotations = true
cutter.validation = false

jar {
    manifest {
        attributes 'FMLAT': 'example_at.cfg'
        attributes 'FMLCorePlugin': 'ru.hooklib.example.ExampleHookLoader'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from zipTree('buildlib.jar')
}


compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}
dependencies {
        implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'
            compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    compile fileTree(include: ['*.jar'], dir: 'lib')

}
tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}

task devJar(type: Jar) {
    classifier = 'dev'
    from sourceSets.main.output
    manifest {
        attributes 'FMLAT': 'example_at.cfg'
        attributes 'FMLCorePlugin': 'ru.hooklib.example.ExampleHookLoader'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from zipTree('buildlib.jar')
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives devJar
    //archives sourcesJar
}

task proGuardObfuscate(type: ProGuardTask) {
    configuration 'proguard/config.txt'

    injars 'build/libs/'+archivesBaseName+'-'+version+'.jar'
    outjars 'build/libs/'+archivesBaseName+'-'+version+'-obf.jar'

    libraryjars "${System.getProperty("java.home")}/lib/rt.jar"
    libraryjars "${System.getProperty("java.home")}/lib/jce.jar"
    libraryjars sourceSets.main.compileClasspath
    keepclasseswithmembers "class ru.vizzi.** { @class ru.vizzi.Utils.obf.IgnoreObf *;}"



    printmapping 'proguard/obfuscate_mappings.txt'
    //obfuscationdictionary 'proguard/obfuscate_dictionary.txt'
   // classobfuscationdictionary 'proguard/obfuscate_dictionary.txt'
    //packageobfuscationdictionary 'proguard/obfuscate_dictionary.txt'

}
//task proGuardObfuscateClient(type: ProGuardTask) {
//    configuration 'proguard/config.txt'
//
//    injars 'build/libs/'+archivesBaseName+'-'+version+'-client.jar'
//    outjars 'build/libs/'+archivesBaseName+'-'+version+'-client-obf.jar'
//
//    libraryjars 'proguard/rt.jar'
//    libraryjars 'proguard/libraries'
//
//    allowaccessmodification
//    overloadaggressively
//
//    printmapping 'proguard/obfuscate_mappings.txt'
//    obfuscationdictionary 'proguard/obfuscate_dictionary.txt'
//    classobfuscationdictionary 'proguard/obfuscate_dictionary.txt'
//    packageobfuscationdictionary 'proguard/obfuscate_dictionary.txt'
//
//
//}
//task proGuardObfuscateServer(type: ProGuardTask) {
//    configuration 'proguard/config.txt'
//
//    injars 'build/libs/'+archivesBaseName+'-'+version+'-server.jar'
//    outjars 'build/libs/'+archivesBaseName+'-'+version+'-server-obf.jar'
//
//    libraryjars 'proguard/rt.jar'
//    libraryjars 'proguard/libraries'
//
//    allowaccessmodification
//    overloadaggressively
//
//    printmapping 'proguard/obfuscate_mappings.txt'
//    obfuscationdictionary 'proguard/obfuscate_dictionary.txt'
//    classobfuscationdictionary 'proguard/obfuscate_dictionary.txt'
//    packageobfuscationdictionary 'proguard/obfuscate_dictionary.txt'
//
//
//}

task zipMod(type: Zip) {
    archiveName = archivesBaseName+"-"+version+".zip"
    destinationDir = file("$projectDir/")

    from "$buildDir/libs/"+archivesBaseName+"-"+version+"-client-obf.jar"
    from "$buildDir/libs/"+archivesBaseName+"-"+version+"-server-obf.jar"
    from "$projectDir/LibrariesCore-1.0.client.jar"
    from "$projectDir/LibrariesCore-1.0-server.jar"
    from "$projectDir/eclipse/resources0.zip"
}
task zipALLProject(type: Zip) {
    archiveName = archivesBaseName+"-"+version+"-ALL.zip"
    destinationDir = file("$projectDir/")

    from "$buildDir/libs/"+archivesBaseName+"-"+version+"-client-obf.jar"
    from "$buildDir/libs/"+archivesBaseName+"-"+version+"-server-obf.jar"
    from "$projectDir/eclipse/resources0.zip"
    from "$projectDir/build.gradle"
    from "$projectDir/BuildModALL.bat"
    from "$projectDir/CreateZipMod.bat"
    from "$projectDir/CreateZipModALL.bat"
    from "$projectDir/ObfuscateALL.bat"
    from "$projectDir/ObfuscateClient.bat"
    from "$projectDir/ObfuscateServer.bat"
    from "$projectDir/LibrariesCore-1.0.client.jar"
    from "$projectDir/LibrariesCore-1.0-server.jar"
    into ('src'){
        from "$projectDir/src"
    }
    into ('libs'){
        from "$projectDir/libs"
    }
    into ('proguard'){
        from "$projectDir/proguard/config.txt"
        from "$projectDir/proguard/downloadLibs.txt"
        from "$projectDir/proguard/obfuscate_dictionary.txt"
        from "$projectDir/proguard/obfuscate_mappings.txt"
    }


}
